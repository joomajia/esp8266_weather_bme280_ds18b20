#include <SPI.h>
#include <SD.h>

#include <ESPAsyncWebSrv.h>

#include <OneWire.h>
#include <DallasTemperature.h>

#include <Wire.h>

#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>


#define ONE_WIRE_BUS 2
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);


const int sensor_address = 0x76;
Adafruit_BME280 bme;

DeviceAddress temperatureSensors[3];
uint8_t deviceCount = 0;

File myFile;

const char *ssid = "ku";
const char *password = "00003333";

AsyncWebServer server(80);

void printAddress(DeviceAddress deviceAddress) {
  for (uint8_t i = 0; i < 8; i++) {
    if (deviceAddress[i] < 16) Serial.print("0");
    Serial.print(deviceAddress[i], HEX);
  }
}


void setup() {

  bool status;
  Serial.begin(115200);

  sensors.begin();
  deviceCount = sensors.getDeviceCount();

  for (uint8_t index = 0; index < deviceCount; index++) {
    sensors.getAddress(temperatureSensors[index], index);
  }

  status = bme.begin(sensor_address);

  if (!status) {
    Serial.println("Could not find a valid BME280 sensor, check wiring!");
    while (1)
      ;
  }
  delay(100);

  Serial.print("Initializing SD card...");
  if (!SD.begin(15)) {
    Serial.println("Initialization failed!");
    while (1)
      ;
  }
  Serial.println("Initialization done.");

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println(WiFi.localIP());

  server.on("/getFileTempDS18B20", HTTP_GET, [](AsyncWebServerRequest *request) {
    String data = readFile("DStempData.txt");
    request->send(200, "text/plain", data);
  });

  server.on("/getFileTempBME280", HTTP_GET, [](AsyncWebServerRequest *request) {
    String data = readFile("BMEtempData.txt");
    request->send(200, "text/plain", data);
  });

  server.on("/getFileHumidBME280", HTTP_GET, [](AsyncWebServerRequest *request) {
    String data = readFile("BMEHumidData.txt");
    request->send(200, "text/plain", data);
  });

  server.on("/getFilePressBME280", HTTP_GET, [](AsyncWebServerRequest *request) {
    String data = readFile("BMEPressData.txt");
    request->send(200, "text/plain", data);
  });

  server.begin();
}

void loop() {

  sensors.requestTemperatures();
  float temperatureC = sensors.getTempCByIndex(0);
  Serial.print("DS18B20 Temperature (C): ");
  Serial.println(temperatureC);

  myFile = SD.open("DStempData.txt", FILE_WRITE);
  if (myFile) {
    myFile.print(millis() / 60000);
    myFile.print(" ");
    myFile.print(temperatureC);
    myFile.println();
    myFile.close();
  } else {
    Serial.println("Error opening dataDS18B20.txt");
  }

  float bmeTemperature = bme.readTemperature();
  Serial.print("BME280 Temperature (C): ");
  Serial.println(bmeTemperature);
  myFile = SD.open("BMEtempData.txt", FILE_WRITE);
  if (myFile) {
    myFile.print(millis() / 60000);
    myFile.print(" ");
    myFile.print(bmeTemperature);
    myFile.println();
    myFile.close();
  } else {
    Serial.println("Error opening dataDS18B20.txt");
  }

  float pressure = bme.readPressure();
  Serial.print("BME280 pressure: ");
  Serial.println(pressure);
  myFile = SD.open("BMEPressData.txt", FILE_WRITE);
  if (myFile) {
    myFile.print(millis() / 60000);
    myFile.print(" ");
    myFile.print(pressure);
    myFile.println();
    myFile.close();
  } else {
    Serial.println("Error opening dataDS18B20.txt");
  }


  float humidity = bme.readHumidity();
  Serial.print("BME280 humidity: ");
  Serial.println(humidity);
  myFile = SD.open("BMEHumidData.txt", FILE_WRITE);
  if (myFile) {
    myFile.print(millis() / 60000);
    myFile.print(" ");
    myFile.print(humidity);
    myFile.println();
    myFile.close();
  } else {
    Serial.println("Error opening dataDS18B20.txt");
  }

  delay(3600000);
}

String readFile(const char *filename) {
  String data;
  File file = SD.open(filename, FILE_READ);
  if (file) {
    while (file.available()) {
      data += char(file.read());
    }
    file.close();
  } else {
    Serial.println("Error opening file");
  }
  return data;
}

// void displayFileContent(const char *filename) {
//   Serial.println("Reading file: " + String(filename));
//   File file = SD.open(filename, FILE_READ);
//   if (file) {
//     while (file.available()) {
//       Serial.write(file.read());
//     }
//     file.close();
//     Serial.println("\nFile read complete.");
//   } else {
//     Serial.println("Error opening file: " + String(filename));
//   }
// }
